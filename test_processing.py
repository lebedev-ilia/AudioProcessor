#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ —Å 22 —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞–º–∏
"""

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
import warnings

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PyTorch
warnings.filterwarnings("ignore", category=UserWarning, module="torch")
warnings.filterwarnings("ignore", message="torch.meshgrid.*indexing.*")

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è TensorFlow/Keras
warnings.filterwarnings("ignore", category=FutureWarning, module="tensorflow")
warnings.filterwarnings("ignore", category=DeprecationWarning, module="tensorflow")
warnings.filterwarnings("ignore", message=".*sparse_softmax_cross_entropy.*")

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è transformers
warnings.filterwarnings("ignore", message=".*not initialized from the model checkpoint.*")
warnings.filterwarnings("ignore", message=".*You should probably TRAIN this model.*")

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from unified_processor import AsyncUnifiedAudioProcessor
from extractors import discover_extractors

async def test_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤"""
    
    # –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–∞–º
    test_files = [
        "src/tests/test_videos/-69HDT6DZEM.mp4",
        "src/tests/test_videos/-JuF2ivdnAg.mp4", 
        "src/tests/test_videos/-niwQ0xGEGk.mp4"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for file_path in test_files:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        else:
            print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä—ã
    extractors = discover_extractors()
    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤: {len(extractors)}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–æ–≤
    for i, extractor in enumerate(extractors, 1):
        print(f"  {i:2d}. {extractor.__class__.__name__}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = AsyncUnifiedAudioProcessor()
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(test_files)} —Ñ–∞–π–ª–æ–≤...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, file_path in enumerate(test_files, 1):
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i}/{len(test_files)}: {os.path.basename(file_path)}")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            result = await processor.process_audio_async(
                input_uri=file_path,
                video_id=f"test_{i}",
                aggregates_only=True
            )
            
            if result.get('success', False):
                print(f"‚úÖ –§–∞–π–ª {os.path.basename(file_path)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   üìä –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")
                print(f"   üìÅ –ú–∞–Ω–∏—Ñ–µ—Å—Ç: {result.get('manifest_path', 'N/A')}")
                
                if result.get('aggregates_extracted', False):
                    print(f"   ‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
                if result.get('segments_extracted', False):
                    print(f"   ‚úÖ –°–µ–≥–º–µ–Ω—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {result.get('error', 'Unknown error')}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {os.path.basename(file_path)}: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_processing())
